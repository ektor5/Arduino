<?xml version="1.0"?>
<project name="Arduino" default="build">
  <!--echo message="os.name = ${os.name}" /-->
  <!--echo message="os.arch = ${os.arch}" /-->
  <!--echo message="os.version = ${os.version}" /-->

  <tstamp>
    <format property="BUILD_DATE" pattern="yyyy/MM/dd hh:mm"/>
  </tstamp>

  <condition property="platform" value="linux32"><os family="unix" arch="arm" /></condition>

  <condition property="linux32"><equals arg1="${platform}" arg2="linux32" /></condition>
  <condition property="linux"><equals arg1="${platform}" arg2="linux32" /></condition>

  <condition property="staging_folder" value="linux"><equals arg1="${platform}" arg2="linux32" /></condition>

  <condition property="staging_hardware_folder" value="hardware"><equals arg1="${platform}" arg2="linux32" /></condition>

  <condition property="arch-bits" value="32">
    <equals arg1="${platform}" arg2="linux32"/>
  </condition>

  <property name="launch4j-download-unpack-target-name" value="launch4j-linux"/>

  <property name="LINUX32_BUNDLED_JVM" value="none"/>
  <condition property="linux-bundle-jvm-task" value="noop">
    <and>
      <equals arg1="${LINUX32_BUNDLED_JVM}" arg2="none"/>
    </and>
  </condition>
  <condition property="linux-bundle-jvm-task" value="bundle">
    <or>
      <not>
        <equals arg1="${LINUX32_BUNDLED_JVM}" arg2="none"/>
      </not>
    </or>
  </condition>

  <!-- Libraries required for running arduino -->
  <fileset dir=".." id="runtime.jars">
    <include name="arduino-core/arduino-core.jar" />
    <include name="app/pde.jar" />
    <include name="app/lib/*.jar" />
    <include name="arduino-core/lib/*.jar" />
  </fileset>

  <target name="build" description="Build Arduino.">
    <antcall target="${platform}-build" />

    <antcall target="generate-hourly-build-txt"/>
  </target>

  <target name="run" description="Run Arduino.">
    <antcall target="${platform}-run" />
  </target>

  <target name="dist" depends="revision-check"
	  description="Build Arduino for distribution.">
    <input message="Enter version number:"
	   addproperty="version"
	   defaultvalue="${revision}" />
    <antcall target="${platform}-dist" />
  </target>

  <!-- "ยง$ยง$&, ant doesn't have a built-in help target :(  -->
  <target name="help" description="Show project help">
    <java classname="org.apache.tools.ant.Main">
      <arg value="-p" />
    </java>
  </target>

  <target name="test" depends="subprojects-test"/>

  <!-- - - - - - - - - - - - - - - - - - -->
  <!-- Subprojects: Core, App, Libraries -->
  <!-- - - - - - - - - - - - - - - - - - -->

  <target name="subprojects-clean">
    <subant buildpath="../arduino-core" target="clean"/>
    <subant buildpath="../app" target="clean"/>
  </target>

  <target name="subprojects-build">
    <subant buildpath="../arduino-core" target="build"/>
    <subant buildpath="../app" target="build"/>
  </target>

  <target name="subprojects-test">
    <subant buildpath="../app" target="test"/>
  </target>

  <!-- - - - - - - - - -->
  <!-- Basic Assembly  -->
  <!-- - - - - - - - - -->

  <target name="assemble">
    <fail unless="target.path" message="Do not call assemble from the command line." />

    <!-- copy shared tools folder -->
    <copy todir="${target.path}/tools">
      <fileset dir="shared/tools" />
    </copy>

    <antcall target="assemble-hardware" />

    <copy file="../hardware/platform.keys.rewrite.txt" todir="${staging_folder}/work/${staging_hardware_folder}"/>

    <!-- copy shared examples folder -->
    <copy todir="${target.path}/examples">
      <fileset dir="shared/examples" />
    </copy>

    <!-- Unzip documentation -->
    <antcall target="unzip">
      <param name="archive_file" value="shared/reference-1.6.0.zip" />
      <param name="archive_url" value="http://downloads.arduino.cc/reference-1.6.0.zip" />
      <param name="final_folder" value="${target.path}/reference/" />
      <param name="dest_folder" value="${target.path}/" />
    </antcall>

    <!-- Write the revision file! -->
    <echo file="${target.path}/lib/version.txt" message="${version}" />

    <antcall target="assemble-libraries" />
  </target>

  <!-- copy library folder -->
  <target name="assemble-libraries" unless="light_bundle">
    <copy todir="${target.path}/libraries">
      <fileset dir="../libraries">
        <!-- exluding non AVR libraries -->
        <exclude name="**/Audio/**"/>
        <exclude name="**/Scheduler/**"/>
        <exclude name="**/USBHost/**"/>
      </fileset>
    </copy>
    <antcall target="unzip">
      <param name="archive_file" value="Firmata-2.4.3.zip" />
      <param name="archive_url" value="https://github.com/arduino-libraries/Firmata/archive/v2.4.3.zip" />
      <param name="final_folder" value="${target.path}/libraries/Firmata-2.4.3" />
      <param name="dest_folder" value="${target.path}/libraries" />
    </antcall>
    <move file="${target.path}/libraries/Firmata-2.4.3" tofile="${target.path}/libraries/Firmata" />
    <antcall target="unzip">
      <param name="archive_file" value="Temboo-1.1.2.zip" />
      <param name="archive_url" value="https://github.com/temboo/Temboo/archive/1.1.2.zip" />
      <param name="final_folder" value="${target.path}/libraries/Temboo-1.1.2" />
      <param name="dest_folder" value="${target.path}/libraries" />
    </antcall>
    <move file="${target.path}/libraries/Temboo-1.1.2" tofile="${target.path}/libraries/Temboo" />
  </target>

  <!-- copy hardware folder -->
  <target name="assemble-hardware" unless="light_bundle">
    <copy todir="${target.path}/hardware">
      <fileset dir="../hardware">
        <exclude name="arduino/sam/**"/>
      </fileset>
    </copy>
  </target>

  <!-- - - - - - - - - -->
  <!-- Revision check  -->
  <!-- - - - - - - - - -->
  <target name="revision-check">
    <!-- figure out the revision number -->
    <loadfile srcfile="shared/revisions.txt" property="revision">
      <filterchain>
        <ignoreblank />
        <headfilter lines="1"/>
        <tokenfilter>
          <linetokenizer includeDelims="false" />
          <!-- grab the thing from the first line that's 4 digits -->
          <containsregex pattern="ARDUINO ([^ ]*)" />
          <replaceregex pattern="ARDUINO ([^ ]*).*" replace="\1" />
        </tokenfilter>
        <tokenfilter>
          <stringtokenizer suppressdelims="true" />
        </tokenfilter>
      </filterchain>
    </loadfile>
    <echo message="Latest revision detected in shared/revision.txt is: ${revision}" />

    <!-- figure out the revision number in base.java -->
    <loadfile srcfile="../arduino-core/src/processing/app/BaseNoGui.java"
	      property="revision.base">
      <filterchain>
        <tokenfilter>
          <linetokenizer />
          <containsregex pattern="String VERSION_NAME = "/>
          <replaceregex pattern=".*&quot;(.*)&quot;.*" flags="g" replace="\1"/>
        </tokenfilter>
      </filterchain>
    </loadfile>
    <echo message="                     Revision in BaseNoGui.java is: ${revision.base}" />
  </target>
  
  <!-- - - - - - - - -->
  <!-- Linux         -->
  <!-- - - - - - - - -->

  <target name="linux-clean" depends="subprojects-clean" description="Clean linux version">
    <delete dir="linux/work" />
    <delete>
      <fileset dir="linux" includes="arduino-*linux*.tar.xz"/>
    </delete>
  </target>

  <target name="linux-checkos" unless="linux">
    <echo>
      =======================================================
      Arduino for Linux can only be built on on unix systems.

      Bye.
      =======================================================
    </echo>

    <fail message="wrong platform (${os.name})" />
  </target>

  <target name="linux-build" depends="revision-check, linux-checkos, subprojects-build" description="Build linux version">
    <mkdir dir="linux/work" />
    <mkdir dir="linux/work/${staging_hardware_folder}" />

    <copy todir="linux/work">
      <fileset dir="shared" includes="lib/**" />
      <fileset file="shared/revisions.txt" />
    </copy>

    <copy todir="linux/work">
      <fileset dir="linux/dist" includes="lib/**" />
    </copy>

    <copy todir="linux/work/lib" flatten="true">
      <fileset refid="runtime.jars" />
    </copy>

    <antcall target="assemble">
      <param name="target.path" value="linux/work" />
    </antcall>

    <copy todir="linux/work" file="linux/dist/arduino" />
    <copy todir="linux/work" file="linux/dist/arduino.desktop" />
    <copy todir="linux/work" file="linux/dist/install.sh" />
    <chmod perm="755" file="linux/work/arduino" />

    <copy todir="linux/work" file="linux/dist/arduino" />
    <chmod perm="755" file="linux/work/arduino" />
    <!-- libastylej
    <antcall target="unzip">
      <param name="archive_file" value="./libastylej-2.05.zip" />
      <param name="archive_url" value="http://downloads.arduino.cc/libastylej-2.05.zip" />
      <param name="final_folder" value="${staging_folder}/libastylej" />
      <param name="dest_folder" value="${staging_folder}" />
    </antcall>
    -->
    <symlink link="/usr/lib/jni/libastylej.so" resource="linux/work/lib/libastylej.so" />
  
  </target>
  <target name="linux32-build" depends="linux-build" description="Build linux (32-bit) version">
    <antcall target="linux-jvm-${linux-bundle-jvm-task}">
      <param name="JVM" value="${LINUX32_BUNDLED_JVM}"/>
    </antcall>
    <!--
    <antcall target="avr-toolchain-bundle">
      <param name="unpack_target" value="untar"/>
      <param name="gcc_archive_file" value="avr-gcc-4.8.1-arduino5-i686-pc-linux-gnu.tar.bz2"/>
      <param name="gcc_version" value="4.8.1-arduino5"/>
      <param name="avrdude_archive_file" value="avrdude-6.0.1-arduino5-i686-pc-linux-gnu.tar.bz2"/>
      <param name="avrdude_version" value="6.0.1-arduino5"/>
    </antcall>
    -->
    <antcall target="package-library-index-json-bundle"/>
  </target>

  <target name="linux-jvm-noop"/>

  <target name="linux-jvm-bundle">
    <mkdir dir="${staging_folder}/work/java" />

    <exec executable="rsync">
      <arg value="-a"/>
      <arg value="${JVM}"/>
      <arg value="${staging_folder}/work/java/"/>
    </exec>
  </target>

  <target name="linux32-run" depends="build" description="Run Linux (32-bit) version">
    <exec executable="./linux/work/arduino" spawn="false" failonerror="true"/>
  </target>


  <!-- Set '${dist_file}_available' property if toolchain dist_file is downloaded              -->
  <!-- Set '${dist_file}_installed' property if toolchain is installed in working directory    -->
  <!--                              hardware/tools/${dist_check_file} is checked for existence -->
  <target name="untar-unzip-check">
    <available file="${archive_file}" property="${archive_file}_available" />
    <available file="${final_folder}" property="${archive_file}_installed" />
  </target>

  <!-- Retrieve tool -->
  <target name="untar-unzip-download" depends="untar-unzip-check" unless="${archive_file}_available">
    <get src="${archive_url}" dest="${archive_file}" verbose="true" ignoreerrors="true" />
  </target>

  <target name="untar-unzip-checksum" depends="untar-unzip-download">
    <echo>Testing checksum of "${archive_file}"</echo>
    <checksum file="${archive_file}" algorithm="sha" fileext=".sha" verifyproperty="checksum.matches"/>
    <condition property="checksum.matches.fail">
      <equals arg1="${checksum.matches}" arg2="false"/>
    </condition>
    <fail if="checksum.matches.fail">Checksum failed.

      File ${archive_file} failed checksum.
      Please remove "${archive_file}" to download it again.
    </fail>
  </target>

  <!-- Ensure that the tool is downloaded and test checksums, if everything's ok unzip it on the tools folder  -->
  <target name="untar" depends="untar-unzip-checksum" unless="${archive_file}_installed">
    <echo>Untarring ${archive_file} into folder ${dest_folder}</echo>
    <exec executable="tar" failonerror="true">
      <arg value="xf"/>
      <arg value="${archive_file}"/>
      <arg value="--directory=${dest_folder}"/>
    </exec>
  </target>

  <target name="unzip" depends="untar-unzip-checksum" unless="${archive_file}_installed">
    <echo>Unzipping ${archive_file} into folder ${dest_folder}</echo>
    <mkdir dir="${dest_folder}" />
    <exec executable="unzip" failonerror="true">
      <arg value="-q" />
      <arg value="-n" />
      <arg value="-d" />
      <arg value="${dest_folder}" />
      <arg value="${archive_file}" />
    </exec>
  </target>

  <target name="unzip-with-ant-task" depends="untar-unzip-checksum" unless="${archive_file}_installed">
    <echo>Unzipping ${archive_file} into folder ${dest_folder}</echo>
    <mkdir dir="${dest_folder}" />
    <unzip src="${archive_file}" dest="${dest_folder}"/>
  </target>

  <target name="linux-dist" depends="build"
	  description="Build .tar.xz of linux version">

    <move file="linux/work" tofile="linux/arduino-${version}" />

    <exec executable="tar" dir="linux" failonerror="true">
      <arg value="--lzma"/>
      <arg value="-c"/>
      <arg value="-f"/>
      <arg value="arduino-${version}-${platform}.tar.xz"/>
      <arg value="arduino-${version}"/>
    </exec>

    <move file="linux/arduino-${version}" tofile="linux/work" />

    <echo>
      =======================================================
      Arduino for Linux was built. Grab the archive from

      linux/arduino-${version}-${platform}.tar.xz
      =======================================================
    </echo>
  </target>

  <target name="linux32-dist" depends="linux-dist"
	  description="Build .tar.xz of linux version" />


  <!-- - - - - - - - -->
  <!-- Source        -->
  <!-- - - - - - - - -->

   <target name="source-dist" depends="revision-check"
	  description="Build .tar.gz of source code">
    <input message="Enter version number:"
	   addproperty="version"
	   defaultvalue="${revision}" />

    <tar compression="gzip" destfile="arduino-${version}-src.tar.gz">
      <tarfileset dir="../"
		  prefix="arduino-${version}"
		  excludes="**/*.tgz,
			     **/*.bz2,
			     **/work/,
			     **/.git/,
			     **/*.class"
		  />
    </tar>

    <echo>
      =======================================================
      Arduino source distribution was built. Grab the archive from

      arduino-${version}-src.tar.gz
      =======================================================
    </echo>
  </target>


  <!-- - - - - - - - -->
  <!-- Run It!       -->
  <!-- - - - - - - - -->

  <target name="clean" description="Perform a spring cleaning"
	  depends="linux-clean, subprojects-clean">
  </target>
  <!--
  <target name="avr-toolchain-bundle" unless="light_bundle">
     Unzip AVR tools
    <mkdir dir="${staging_folder}/work/${staging_hardware_folder}/tmp/gcc"/>

    <antcall target="${unpack_target}">
      <param name="archive_file" value="${staging_folder}/${gcc_archive_file}"/>
      <param name="archive_url" value="http://downloads.arduino.cc/tools/${gcc_archive_file}"/>
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tmp/gcc/${gcc_version}/"/>
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tmp/gcc/"/>
    </antcall>

    <mkdir dir="${staging_folder}/work/${staging_hardware_folder}/tmp/avrdude"/>

    <antcall target="${unpack_target}">
      <param name="archive_file" value="${staging_folder}/${avrdude_archive_file}"/>
      <param name="archive_url" value="http://downloads.arduino.cc/tools/${avrdude_archive_file}"/>
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tmp/avrdude/${avrdude_version}"/>
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tmp/avrdude/"/>
    </antcall>

    <move file="${staging_folder}/work/${staging_hardware_folder}/tmp/gcc/avr" tofile="${staging_folder}/work/${staging_hardware_folder}/tools/avr"/>
    <move file="${staging_folder}/work/${staging_hardware_folder}/tmp/avrdude/avrdude-6.0.1" tofile="${staging_folder}/work/${staging_hardware_folder}/tools/avr"/>

    <echo append="true" file="${staging_folder}/work/${staging_hardware_folder}/tools/avr/builtin_tools_versions.txt" message="arduino.avrdude=${avrdude_version}${line.separator}"/>
    <echo append="true" file="${staging_folder}/work/${staging_hardware_folder}/tools/avr/builtin_tools_versions.txt" message="arduino.avr-gcc=${gcc_version}${line.separator}"/>
  </target>
  -->
  <target name="package-library-index-json-bundle">
    <mkdir dir="${staging_folder}/work/${staging_hardware_folder}/../dist/"/>

    <get src="http://downloads.arduino.cc/packages/package_index.json.gz" dest="${staging_folder}/work/${staging_hardware_folder}/../dist/" verbose="true" skipexisting="false" />
    <gunzip src="${staging_folder}/work/${staging_hardware_folder}/../dist/package_index.json.gz" dest="${staging_folder}/work/${staging_hardware_folder}/../dist/"/>
    <delete file="${staging_folder}/work/${staging_hardware_folder}/../dist/package_index.json.gz"/>

    <get src="http://downloads.arduino.cc/packages/package_index.json.sig" dest="${staging_folder}/work/${staging_hardware_folder}/../dist/" verbose="true" skipexisting="false" />

    <get src="http://downloads.arduino.cc/libraries/library_index.json.gz" dest="${staging_folder}/work/${staging_hardware_folder}/../dist/" verbose="true" skipexisting="false" />
    <gunzip src="${staging_folder}/work/${staging_hardware_folder}/../dist/library_index.json.gz" dest="${staging_folder}/work/${staging_hardware_folder}/../dist/"/>
    <delete file="${staging_folder}/work/${staging_hardware_folder}/../dist/library_index.json.gz"/>

    <delete dir="${staging_folder}/work/${staging_hardware_folder}/tmp"/>
  </target>

  <target name="generate-hourly-build-txt" if="hourly">
    <echo file="${staging_folder}/work/${staging_hardware_folder}/../lib/hourlyBuild.txt">${BUILD_DATE}</echo>
  </target>

</project>
